<?xml version='1.1' encoding='UTF-8'?>
<project>
  <actions/>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>ROLE_ARN</name>
          <defaultValue>$arn_role_app</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>ami_id</name>
          <defaultValue>ami-07b0a3482c6da9206</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>infrastructure_git_hash</name>
          <defaultValue>e45319bd46737756f49c71344b624bf03a30d756</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>deployment_git_hash</name>
          <defaultValue>81454a34727a7429970a80d51bc78e34aa04454a</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>input_s3_bucket</name>
          <defaultValue>nih-nhlbi-topmed-released-phs001412-c2</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>output_s3_bucket</name>
          <defaultValue>avillach-biodatacatalyst-deployments-3drb48r</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>study_id</name>
          <defaultValue>phs001412</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>consent_group_tag</name>
          <defaultValue>.c2</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>chrom_number</name>
          <defaultValue>7</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>study_consent_group</name>
          <defaultValue>c2</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>study_name</name>
          <defaultValue>DHS</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.BooleanParameterDefinition>
          <name>terminate_on_completion</name>
          <defaultValue>false</defaultValue>
        </hudson.model.BooleanParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
  </properties>
  <scm class="hudson.plugins.git.GitSCM" plugin="git@4.12.1">
    <configVersion>2</configVersion>
    <userRemoteConfigs>
      <hudson.plugins.git.UserRemoteConfig>
        <url>https://github.com/hms-dbmi/avillachlab-secure-infrastructure</url>
      </hudson.plugins.git.UserRemoteConfig>
    </userRemoteConfigs>
    <branches>
      <hudson.plugins.git.BranchSpec>
        <name>${infrastructure_git_hash}</name>
      </hudson.plugins.git.BranchSpec>
    </branches>
    <doGenerateSubmoduleConfigurations>false</doGenerateSubmoduleConfigurations>
    <submoduleCfg class="empty-list"/>
    <extensions/>
  </scm>
  <canRoam>true</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers/>
  <concurrentBuild>true</concurrentBuild>
  <builders>
    <hudson.tasks.Shell>
      <command>#!/bin/bash
cd genomic-etl-infrastructure

aws sts assume-role --role-arn $arn_role_cnc --role-session-name &quot;stand-up-genomic-etl&quot; &gt; assume-role-output-$study_id-$consent_group_tag-$chrom_number.txt

export AWS_ACCESS_KEY_ID=`grep AccessKeyId assume-role-output-$study_id-$consent_group_tag-$chrom_number.txt | cut -d &apos;:&apos; -f 2 | sed &quot;s/[ ,\&quot;]//g&quot;`
export AWS_SECRET_ACCESS_KEY=`grep SecretAccessKey assume-role-output-$study_id-$consent_group_tag-$chrom_number.txt | cut -d &apos;:&apos; -f 2 | sed &quot;s/[ ,\&quot;]//g&quot;`
export AWS_SESSION_TOKEN=`grep SessionToken assume-role-output-$study_id-$consent_group_tag-$chrom_number.txt | cut -d &apos;:&apos; -f 2 | sed &quot;s/[ ,\&quot;]//g&quot;`

aws s3 cp s3://${output_s3_bucket}/genomic-etl/deployment_state_metadata/${study_id}${consent_group_tag}/${chrom_number}/genomic_etl_variables.tf .
aws s3 cp s3://${output_s3_bucket}/genomic-etl/deployment_state_metadata/subnet_variables.tf .
aws s3 cp s3://${output_s3_bucket}/genomic-etl/deployment_state_metadata/${study_id}${consent_group_tag}/${chrom_number}/terraform.tfstate .

export TF_LOG=&quot;INFO&quot;
cd ../genomic-etl-infrastructure
terraform init
terraform workspace select ${study_id}${consent_group_tag}-${chrom_number} || terraform workspace new ${study_id}${consent_group_tag}-${chrom_number} 
terraform apply -auto-approve  -var=&quot;s3_role=${arn_role_cnc}&quot; -var=&quot;study_name=${study_name}&quot; -var=&quot;output_s3_bucket=${output_s3_bucket}&quot; -var=&quot;input_s3_bucket=${input_s3_bucket}&quot; -var=&quot;study_id=${study_id}&quot; -var=&quot;chrom_number=${chrom_number}&quot; -var=&quot;study_consent_group=${study_consent_group}&quot; -var=&quot;consent_group_tag=${consent_group_tag}&quot; -var=&quot;ami-id=${ami_id}&quot;  -var=&quot;deployment_githash=`echo ${deployment_git_hash} |cut -c1-7`&quot; -var=&quot;deployment_githash_long=${deployment_git_hash}&quot; || true

aws s3 cp terraform.tfstate s3://${stack_s3_bucket}/genomic-etl/deployment_state_metadata/${study_id}${consent_group_tag}/${chrom_number}/terraform.tfstate || echo &apos;tfstate for ec2 error&apos;

unset AWS_ACCESS_KEY_ID
unset AWS_SECRET_ACCESS_KEY
unset AWS_SESSION_TOKEN

aws sts assume-role --role-arn $arn_role_cnc --role-session-name &quot;annotation-checks&quot; &gt; assume-role-output-$study_id-$consent_group_tag-$chrom_number.txt

export AWS_ACCESS_KEY_ID=`grep AccessKeyId assume-role-output-$study_id-$consent_group_tag-$chrom_number.txt | cut -d &apos;:&apos; -f 2 | sed &quot;s/[ ,\&quot;]//g&quot;`
export AWS_SECRET_ACCESS_KEY=`grep SecretAccessKey assume-role-output-$study_id-$consent_group_tag-$chrom_number.txt | cut -d &apos;:&apos; -f 2 | sed &quot;s/[ ,\&quot;]//g&quot;`
export AWS_SESSION_TOKEN=`grep SessionToken assume-role-output-$study_id-$consent_group_tag-$chrom_number.txt | cut -d &apos;:&apos; -f 2 | sed &quot;s/[ ,\&quot;]//g&quot;`

#!/bin/bash
aws ec2 describe-spot-fleet-requests --region us-east-1 --query &quot;SpotFleetRequestConfigs[?SpotFleetRequestConfig.LaunchSpecifications[?TagSpecifications[?Tags[?Value == &apos;Genomic ETL Annotation Pipeline - ${study_id}${consent_group_tag} Chromosome ${chrom_number}&apos;]]] &amp;&amp; (SpotFleetRequestState == &apos;active&apos; || SpotFleetRequestState==&apos;open&apos;)].SpotFleetRequestId&quot; &gt; fleet_id_${study_id}${consent_group_tag}_${chrom_number}.txt
export fleetId=`grep sfr fleet_id_${study_id}${consent_group_tag}_${chrom_number}.txt  | cut -d &apos;&quot;&apos; -f 2` &amp;&amp; echo fleet id ${fleetId}
aws ec2 describe-spot-fleet-request-history --spot-fleet-request-id ${fleetId} --start-time `TZ=&quot;America/New_York&quot; date --date &apos;today -5 minutes&apos; &quot;+%FT%TZ&quot;` --event-type instanceChange --query &quot;HistoryRecords[?EventInformation.EventSubType==&apos;launched&apos;].EventInformation.InstanceId&quot; --region us-east-1 &gt; instance_id.txt
export instanceId=`grep &apos;i-&apos; instance_id.txt  | cut -d &apos;&quot;&apos; -f 2` &amp;&amp; echo ${instanceId}
export restartCount=0
while [ -z ${instanceId} ]
do
echo &apos;waiting for instance launch&apos;
sleep 10
aws ec2 describe-spot-fleet-request-history --spot-fleet-request-id ${fleetId} --start-time `TZ=&quot;America/New_York&quot; date --date &apos;today -5 minutes&apos; &quot;+%FT%TZ&quot;` --event-type instanceChange --query &quot;HistoryRecords[?EventInformation.EventSubType==&apos;launched&apos;].EventInformation.InstanceId&quot; --region us-east-1 &gt; instance_id.txt
export instanceId=`grep &apos;i-&apos; instance_id.txt  | cut -d &apos;&quot;&apos; -f 2`
done

echo new instance id ${instanceId}
#!/bin/bash
while [[ -z $(aws --region=us-east-1 ec2 describe-tags --filters Name=resource-id,Values=&quot;${instanceId}&quot; Name=tag:AnnotationComplete,Values=&quot;true&quot; | grep AnnotationComplete) ]] &amp;&amp; [[ -z $(aws --region=us-east-1 ec2 describe-tags --filters Name=resource-id,Values=&quot;${instanceId}&quot; Name=tag:AnnotationComplete,Values=&quot;false&quot; | grep AnnotationComplete) ]]
do
#!/bin/bash
if [[ -z $(aws ec2 describe-spot-fleet-request-history --spot-fleet-request-id ${fleetId} --start-time `TZ=&quot;America/New_York&quot; date --date &apos;today -10 minutes&apos; &quot;+%FT%TZ&quot;` --event-type instanceChange --query &quot;HistoryRecords[?EventInformation.InstanceId==&apos;${instanceId}&apos;]|[?EventInformation.EventSubType==&apos;terminated&apos;]&quot; --region us-east-1 | grep InstanceId) ]]
then
echo instance is stable


else
echo &apos;instance terminated, getting new instance id&apos;
unset instanceId
export restartCount=`expr ${restartCount} + 1`
aws sns publish --topic-arn arn:aws:sns:us-east-1:900561893673:genomic-etl --message &quot;Instance terminated before job completion for ${study_id}${consent_group_tag} Chromosome ${chrom_number}. Fleet id is ${fleetId}. Instance has been restarted ${restartCount} time(s)&quot; --region us-east-1

while [ -z ${instanceId} ]

do

echo &apos;waiting for instance relaunch&apos;

aws sts assume-role --role-arn $arn_role_cnc --role-session-name &quot;relaunch-checks&quot; &gt; assume-role-output-$study_id-$consent_group_tag-$chrom_number.txt;
export AWS_ACCESS_KEY_ID=`grep AccessKeyId assume-role-output-$study_id-$consent_group_tag-$chrom_number.txt | cut -d &apos;:&apos; -f 2 | sed &quot;s/[ ,\&quot;]//g&quot;`;
export AWS_SECRET_ACCESS_KEY=`grep SecretAccessKey assume-role-output-$study_id-$consent_group_tag-$chrom_number.txt | cut -d &apos;:&apos; -f 2 | sed &quot;s/[ ,\&quot;]//g&quot;`;
export AWS_SESSION_TOKEN=`grep SessionToken assume-role-output-$study_id-$consent_group_tag-$chrom_number.txt | cut -d &apos;:&apos; -f 2 | sed &quot;s/[ ,\&quot;]//g&quot;`;

aws ec2 describe-spot-fleet-request-history --spot-fleet-request-id ${fleetId} --start-time `TZ=&quot;America/New_York&quot; date --d &apos;today -10 minutes&apos; &quot;+%FT%TZ&quot;` --event-type instanceChange --query &quot;HistoryRecords[?EventInformation.EventSubType==&apos;launched&apos;].EventInformation.InstanceId&quot; --region us-east-1 &gt; instance_id.txt
export instanceId=`grep &apos;i-&apos; instance_id.txt  | cut -d &apos;&quot;&apos; -f 2`
done

echo new instance id ${instanceId}

fi

echo &quot;Annotation in process&quot;;
sleep 60
aws sts assume-role --role-arn $arn_role_cnc --role-session-name &quot;annotation-checks&quot; &gt; assume-role-output-$study_id-$consent_group_tag-$chrom_number.txt;
export AWS_ACCESS_KEY_ID=`grep AccessKeyId assume-role-output-$study_id-$consent_group_tag-$chrom_number.txt | cut -d &apos;:&apos; -f 2 | sed &quot;s/[ ,\&quot;]//g&quot;`;
export AWS_SECRET_ACCESS_KEY=`grep SecretAccessKey assume-role-output-$study_id-$consent_group_tag-$chrom_number.txt | cut -d &apos;:&apos; -f 2 | sed &quot;s/[ ,\&quot;]//g&quot;`;
export AWS_SESSION_TOKEN=`grep SessionToken assume-role-output-$study_id-$consent_group_tag-$chrom_number.txt | cut -d &apos;:&apos; -f 2 | sed &quot;s/[ ,\&quot;]//g&quot;`;

done

if [ $(aws --region=us-east-1 ec2 describe-tags --filters Name=resource-id,Values=&quot;${instanceId}&quot; Name=key,Values=AnnotationComplete --query &quot;Tags[*].Value&quot; | jq .[0]) = &apos;&quot;true&quot;&apos; ]
then
echo &apos;Annotation completed successfully&apos;
export AnnotationDone=true
else
echo &apos;Annotation not successful&apos;
export AnnotationDone=false
fi

if ($terminate_on_completion)
then
aws ec2 cancel-spot-fleet-requests --region us-east-1 --spot-fleet-request-ids ${fleetId} --terminate-instances || echo &apos;could not terminate&apos;
fi

unset AWS_ACCESS_KEY_ID
unset AWS_SECRET_ACCESS_KEY
unset AWS_SESSION_TOKEN
if [ ${AnnotationDone} = false ]
then
exit 44
fi</command>
      <configuredLocalRules/>
      <unstableReturn>44</unstableReturn>
    </hudson.tasks.Shell>
  </builders>
  <publishers>
    <hudson.plugins.emailext.ExtendedEmailPublisher plugin="email-ext@2.92">
      <recipientList>sharra_neely@hms.harvard.edu</recipientList>
      <configuredTriggers>
        <hudson.plugins.emailext.plugins.trigger.UnstableTrigger>
          <email>
            <subject>$PROJECT_DEFAULT_SUBJECT</subject>
            <body>$PROJECT_DEFAULT_CONTENT</body>
            <recipientProviders>
              <hudson.plugins.emailext.plugins.recipients.ListRecipientProvider/>
            </recipientProviders>
            <attachmentsPattern></attachmentsPattern>
            <attachBuildLog>false</attachBuildLog>
            <compressBuildLog>false</compressBuildLog>
            <replyTo>$PROJECT_DEFAULT_REPLYTO</replyTo>
            <contentType>project</contentType>
          </email>
        </hudson.plugins.emailext.plugins.trigger.UnstableTrigger>
      </configuredTriggers>
      <contentType>default</contentType>
      <defaultSubject>VEP failure on $study_id group $study_consent_group chromosome $chrom_number</defaultSubject>
      <defaultContent>$DEFAULT_CONTENT</defaultContent>
      <attachmentsPattern></attachmentsPattern>
      <presendScript>$DEFAULT_PRESEND_SCRIPT</presendScript>
      <postsendScript>$DEFAULT_POSTSEND_SCRIPT</postsendScript>
      <attachBuildLog>false</attachBuildLog>
      <compressBuildLog>false</compressBuildLog>
      <replyTo>$DEFAULT_REPLYTO</replyTo>
      <from></from>
      <saveOutput>false</saveOutput>
      <disabled>false</disabled>
    </hudson.plugins.emailext.ExtendedEmailPublisher>
  </publishers>
  <buildWrappers/>
</project>