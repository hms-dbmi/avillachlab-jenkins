<?xml version='1.1' encoding='UTF-8'?>
<project>
  <actions/>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>ROLE_ARN</name>
          <defaultValue>$arn_role_app</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>ami_id</name>
          <defaultValue>ami-07b0a3482c6da9206</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>infrastructure_git_hash</name>
          <defaultValue>e24730550ecb8edfb792b6bc9459581514944dad</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>deployment_git_hash</name>
          <defaultValue>8ca17ac9d341bc1eb197aa4de28b4472364e68ee</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>input_s3_bucket</name>
          <defaultValue>avillach-biodatacatalyst-deployments-3drb48r/genomic-etl/test-files/small</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>output_s3_bucket</name>
          <defaultValue>avillach-biodatacatalyst-deployments-3drb48r</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>study_id</name>
          <defaultValue>phs0000</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>consent_group_tag</name>
          <defaultValue>.c1</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>chrom_number</name>
          <defaultValue>X</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>study_consent_group</name>
          <defaultValue>c1</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>study_name</name>
          <defaultValue>SAMPLE</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
  </properties>
  <scm class="hudson.plugins.git.GitSCM" plugin="git@4.12.1">
    <configVersion>2</configVersion>
    <userRemoteConfigs>
      <hudson.plugins.git.UserRemoteConfig>
        <url>https://github.com/hms-dbmi/avillachlab-secure-infrastructure</url>
      </hudson.plugins.git.UserRemoteConfig>
    </userRemoteConfigs>
    <branches>
      <hudson.plugins.git.BranchSpec>
        <name>${infrastructure_git_hash}</name>
      </hudson.plugins.git.BranchSpec>
    </branches>
    <doGenerateSubmoduleConfigurations>false</doGenerateSubmoduleConfigurations>
    <submoduleCfg class="empty-list"/>
    <extensions/>
  </scm>
  <canRoam>true</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers/>
  <concurrentBuild>true</concurrentBuild>
  <builders>
    <hudson.tasks.Shell>
      <command>cd genomic-etl-infrastructure

aws sts assume-role --role-arn $arn_role_cnc --role-session-name &quot;stand-up-genomic-etl&quot; &gt; assume-role-output-$study_id-$consent_group_tag-$chrom_number.txt

export AWS_ACCESS_KEY_ID=`grep AccessKeyId assume-role-output-$study_id-$consent_group_tag-$chrom_number.txt | cut -d &apos;:&apos; -f 2 | sed &quot;s/[ ,\&quot;]//g&quot;`
export AWS_SECRET_ACCESS_KEY=`grep SecretAccessKey assume-role-output-$study_id-$consent_group_tag-$chrom_number.txt | cut -d &apos;:&apos; -f 2 | sed &quot;s/[ ,\&quot;]//g&quot;`
export AWS_SESSION_TOKEN=`grep SessionToken assume-role-output-$study_id-$consent_group_tag-$chrom_number.txt | cut -d &apos;:&apos; -f 2 | sed &quot;s/[ ,\&quot;]//g&quot;`

aws s3 cp s3://${output_s3_bucket}/genomic-etl/deployment_state_metadata/${study_id}${consent_group_tag}/${chrom_number}/genomic_etl_variables.tf .
aws s3 cp s3://${output_s3_bucket}/genomic-etl/deployment_state_metadata/subnet_variables.tf .
aws s3 cp s3://${output_s3_bucket}/genomic-etl/deployment_state_metadata/${study_id}${consent_group_tag}/${chrom_number}/terraform.tfstate .

export TF_LOG=&quot;INFO&quot;
cd ../genomic-etl-infrastructure
terraform init
terraform workspace select ${study_id}${consent_group_tag}-${chrom_number} || terraform workspace new ${study_id}${consent_group_tag}-${chrom_number} 
terraform apply -auto-approve  -var=&quot;s3_role=${arn_role_cnc}&quot; -var=&quot;study_name=${study_name}&quot; -var=&quot;output_s3_bucket=${output_s3_bucket}&quot; -var=&quot;input_s3_bucket=${input_s3_bucket}&quot; -var=&quot;study_id=${study_id}&quot; -var=&quot;chrom_number=${chrom_number}&quot; -var=&quot;study_consent_group=${study_consent_group}&quot; -var=&quot;consent_group_tag=${consent_group_tag}&quot; -var=&quot;ami-id=${ami_id}&quot;  -var=&quot;deployment_githash=`echo ${deployment_git_hash} |cut -c1-7`&quot; -var=&quot;deployment_githash_long=${deployment_git_hash}&quot; || true

aws s3 cp terraform.tfstate s3://${stack_s3_bucket}/genomic-etl/deployment_state_metadata/${study_id}${consent_group_tag}/${chrom_number}/terraform.tfstate || echo &apos;tfstate for ec2 error&apos;

unset AWS_ACCESS_KEY_ID
unset AWS_SECRET_ACCESS_KEY
unset AWS_SESSION_TOKEN

aws sts assume-role --role-arn $arn_role_cnc --role-session-name &quot;annotation-checks&quot; &gt; assume-role-output-$study_id-$consent_group_tag-$chrom_number.txt

export AWS_ACCESS_KEY_ID=`grep AccessKeyId assume-role-output-$study_id-$consent_group_tag-$chrom_number.txt | cut -d &apos;:&apos; -f 2 | sed &quot;s/[ ,\&quot;]//g&quot;`
export AWS_SECRET_ACCESS_KEY=`grep SecretAccessKey assume-role-output-$study_id-$consent_group_tag-$chrom_number.txt | cut -d &apos;:&apos; -f 2 | sed &quot;s/[ ,\&quot;]//g&quot;`
export AWS_SESSION_TOKEN=`grep SessionToken assume-role-output-$study_id-$consent_group_tag-$chrom_number.txt | cut -d &apos;:&apos; -f 2 | sed &quot;s/[ ,\&quot;]//g&quot;`

aws ec2 describe-instances --region us-east-1 --filters Name=tag-value,Values=&quot;Genomic ETL Annotation Pipeline - ${study_id}${consent_group_tag} Chromosome ${chrom_number}&quot; &gt;instance_description_${study_id}${consent_group_tag}_${chrom_number}.json
while [ -z $(aws --region=us-east-1 ec2 describe-tags --filters Name=resource-id,Values=&quot;`jq -r &apos;.Reservations|.[0]|.Instances|.[0]|.InstanceId&apos; instance_description_${study_id}${consent_group_tag}_${chrom_number}.json`&quot; | grep AnnotationComplete)];\
do \
echo &quot;Annotation in process&quot;;\
sleep 120;\
aws sts assume-role --role-arn $arn_role_cnc --role-session-name &quot;annotation-checks&quot; &gt; assume-role-output-$study_id-$consent_group_tag-$chrom_number.txt;\
export AWS_ACCESS_KEY_ID=`grep AccessKeyId assume-role-output-$study_id-$consent_group_tag-$chrom_number.txt | cut -d &apos;:&apos; -f 2 | sed &quot;s/[ ,\&quot;]//g&quot;`;\
export AWS_SECRET_ACCESS_KEY=`grep SecretAccessKey assume-role-output-$study_id-$consent_group_tag-$chrom_number.txt | cut -d &apos;:&apos; -f 2 | sed &quot;s/[ ,\&quot;]//g&quot;`;\
export AWS_SESSION_TOKEN=`grep SessionToken assume-role-output-$study_id-$consent_group_tag-$chrom_number.txt | cut -d &apos;:&apos; -f 2 | sed &quot;s/[ ,\&quot;]//g&quot;`;\
done

echo &apos;Annotation Complete&apos;
unset AWS_ACCESS_KEY_ID
unset AWS_SECRET_ACCESS_KEY
unset AWS_SESSION_TOKEN</command>
      <configuredLocalRules/>
    </hudson.tasks.Shell>
  </builders>
  <publishers/>
  <buildWrappers/>
</project>