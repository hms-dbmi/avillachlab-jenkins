pipeline {
    agent any

    parameters {
        string(name: 'GROOVY_LIB_BRANCH', defaultValue: 'release-new-ui', description: 'The branch of the Groovy library to use')
        string(name: 'DISPLAY', defaultValue: '3', description: 'Weight for concept_node.DISPLAY')
        string(name: 'CONCEPT_PATH', defaultValue: '2', description: 'Weight for concept_node.CONCEPT_PATH')
        string(name: 'FULL_NAME', defaultValue: '1', description: 'Weight for dataset.FULL_NAME')
        string(name: 'DESCRIPTION', defaultValue: '1', description: 'Weight for dataset.DESCRIPTION')
        string(name: 'META_STR', defaultValue: '1', description: 'Weight for concept_node_meta_str')
        string(name: 'GIT_REPO_URL', defaultValue: 'https://github.com/hms-dbmi/picsure-dictionary.git', description: 'The GitHub repository URL')
        string(name: 'GIT_BRANCH', defaultValue: 'release', description: 'The Git branch to checkout')
        string(name: 'DOCKER_REPO', defaultValue: 'avillach', description: 'The Docker repository name')
        string(name: 'SPRING_PROFILE', defaultValue: 'bdc', description: 'The Spring profile')
        string(name: 'IMAGE_NAME', defaultValue: 'dictionary_weights', description: 'The name of the Docker image')
        string(name: 'DOCKER_IMAGE_VERSION', defaultValue: 'latest', description: 'The Docker image tag')
        string(name: 'DATASOURCE_URL', description: 'Datasource URL', defaultValue: '${database_psql_host_address}')
        string(name: 'DATASOURCE_USERNAME', description: 'Datasource username', defaultValue: '${database_psql_root_user_secret_name}')
    }

    @Library("avillach_lab_pic_sure@${params.GROOVY_LIB_BRANCH}") _

    stages {
        stage('Build CSV') {
            steps {
                script {
                    def csvContent = """\
                    concept_node.DISPLAY,${params.DISPLAY}
                    concept_node.CONCEPT_PATH,${params.CONCEPT_PATH}
                    dataset.FULL_NAME,${params.FULL_NAME}
                    dataset.DESCRIPTION,${params.DESCRIPTION}
                    concept_node_meta_str,${params.META_STR}
                    """

                    writeFile file: 'weights.csv', text: csvContent
                }
            }
        }

        stage('Archive CSV') {
            steps {
                archiveArtifacts artifacts: 'weights.csv', onlyIfSuccessful: true
            }
        }

        stage('Clone Repository') {
            steps {
                script {
                    def ref = "${params.GIT_BRANCH}"
                    checkout([$class: 'GitSCM',

