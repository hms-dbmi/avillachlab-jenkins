<?xml version='1.1' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@2.36">
  <actions>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@1.5.0"/>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@1.5.0">
      <jobProperties/>
      <triggers/>
      <parameters/>
      <options/>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
  </actions>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>VPC_ID</name>
          <description></description>
          <defaultValue></defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>SUBNET_ID</name>
          <description></description>
          <defaultValue></defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.78">
    <script>import groovy.json.JsonSlurper;
def target_stack
def instance_state
def instance_id
pipeline {
   agent any
   stages {
      stage(&apos;Build&apos;) {
         steps {
            git branch: &apos;master&apos;, url: &apos;https://${git_base_url}/pic-sure-bdc-infrastructure.git&apos;
            sh &quot;&quot;&quot;
                aws sts assume-role --duration-seconds 900 --role-arn &quot;arn:aws:iam::${app_acct_id}:role/hms-dbmi-cnc-role&quot; --role-session-name &quot;ami-builder&quot; &gt; assume-role-output.txt
                export AWS_ACCESS_KEY_ID=`grep AccessKeyId assume-role-output.txt | cut -d &apos;:&apos; -f 2 | sed &quot;s/[ ,\\\&quot;]//g&quot;`
                export AWS_SECRET_ACCESS_KEY=`grep SecretAccessKey assume-role-output.txt | cut -d &apos;:&apos; -f 2 | sed &quot;s/[ ,\\\&quot;]//g&quot;`
                export AWS_SESSION_TOKEN=`grep SessionToken assume-role-output.txt | cut -d &apos;:&apos; -f 2 | sed &quot;s/[ ,\\\&quot;]//g&quot;`
                cd centos-ami
                terraform init
                terraform destroy -auto-approve -var=&quot;target-vpc=${VPC_ID}&quot; -var=&quot;target-subnet-id=${SUBNET_ID}&quot;
                terraform apply -auto-approve -var=&quot;target-vpc=${VPC_ID}&quot; -var=&quot;target-subnet-id=${SUBNET_ID}&quot;
                terraform state show aws_instance.docker-awscli-base &gt; /var/jenkins_home/workspace/Docker-AWSCLI/instance_id.txt
                cat /var/jenkins_home/workspace/Docker-AWSCLI/instance_id.txt
            &quot;&quot;&quot;
            script{
                instance_state = new File(&apos;/var/jenkins_home/workspace/Docker-AWSCLI/instance_id.txt&apos;).text
                for(def line : instance_state.split(&quot;\n&quot;)){
                    def splitLine = line.split(&quot;\&quot;&quot;)
                    if(splitLine.length &gt; 1){
                        echo splitLine[1];
                        if(splitLine[1].matches(&quot;i-[0-9a-f]+&quot;)){
                            instance_id = splitLine[1]
                        }
                    }
                }
                echo instance_id
            }
            sh &quot;&quot;&quot;
                aws sts assume-role --duration-seconds 1800 --role-arn &quot;arn:aws:iam::${app_acct_id}:role/hms-dbmi-cnc-role&quot; --role-session-name &quot;ami-builder&quot; &gt; assume-role-output.txt
                export AWS_ACCESS_KEY_ID=`grep AccessKeyId assume-role-output.txt | cut -d &apos;:&apos; -f 2 | sed &quot;s/[ ,\\\&quot;]//g&quot;`
                export AWS_SECRET_ACCESS_KEY=`grep SecretAccessKey assume-role-output.txt | cut -d &apos;:&apos; -f 2 | sed &quot;s/[ ,\\\&quot;]//g&quot;`
                export AWS_SESSION_TOKEN=`grep SessionToken assume-role-output.txt | cut -d &apos;:&apos; -f 2 | sed &quot;s/[ ,\\\&quot;]//g&quot;`
                echo &quot;&quot; &gt; /var/jenkins_home/workspace/Docker-AWSCLI/tags.txt
                while ! grep &quot;InitComplete&quot; /var/jenkins_home/workspace/Docker-AWSCLI/tags.txt;do sleep 30 &amp;&amp; aws --region us-east-1 ec2 describe-tags --filters &quot;Name=resource-id,Values=${instance_id}&quot; &gt;/var/jenkins_home/workspace/Docker-AWSCLI/tags.txt;done
                cat /var/jenkins_home/workspace/Docker-AWSCLI/tags.txt
                aws --region us-east-1 ec2 create-image --instance-id ${instance_id} --name &quot;Docker-AWSCLI-CIS-`date +&quot;%Y%m%d-%H%M&quot;`&quot; --description &quot;Docker-AWSCLI AMI based off of CIS Benchmark Centos 7&quot; &gt; image_id.txt
                aws --region us-east-1 ec2 create-tags --resources `grep ImageId image_id.txt | cut -d &apos;:&apos; -f 2 | sed &quot;s/[ ,\\\&quot;]//g&quot;` --tags &apos;Key=&quot;approval-status&quot;,Value=untested&apos;
                cd centos-ami
                sleep 180s
                terraform destroy -auto-approve -var=&quot;target-vpc=${VPC_ID}&quot; -var=&quot;target-subnet-id=${SUBNET_ID}&quot;
            &quot;&quot;&quot;
         }
      }
   }
}</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>
