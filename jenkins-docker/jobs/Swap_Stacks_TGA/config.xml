<?xml version='1.1' encoding='UTF-8'?>
<project>
  <actions/>
  <description>Need to add these records into httpd instance.  Module should handle these records as they relate to the state of each stacks httpd server.&#xd;
&#xd;
add this work when moving to modular composition approach.</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>staging_stack</name>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>live_stack</name>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>infrastructure_git_hash</name>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
  </properties>
  <scm class="hudson.scm.NullSCM"/>
  <canRoam>true</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers/>
  <concurrentBuild>false</concurrentBuild>
  <builders>
    <hudson.tasks.Shell>
      <command># json tag schema.  Used to uniquely identify a projects staging instances.
cat &lt;&lt;EOF &gt; staging_httpd_tags_file.json
[
  {
    &quot;Name&quot;: &quot;tag:Stack&quot;,
    &quot;Values&quot;: [&quot;$staging_stack&quot;]
  },
  {
    &quot;Name&quot;: &quot;tag:Node&quot;,
    &quot;Values&quot;: [&quot;HTTPD&quot;]
  },
  {
    &quot;Name&quot;: &quot;tag:Project&quot;,
    &quot;Values&quot;: [&quot;$env_project&quot;]
  }
]
EOF</command>
      <configuredLocalRules/>
    </hudson.tasks.Shell>
    <hudson.tasks.Shell>
      <command># json tag schema.  Used to uniquely identify a projects staging instances.
cat &lt;&lt;EOF &gt; live_httpd_tags_file.json
[
  {
    &quot;Name&quot;: &quot;tag:Stack&quot;,
    &quot;Values&quot;: [&quot;$live_stack&quot;]
  },
  {
    &quot;Name&quot;: &quot;tag:Node&quot;,
    &quot;Values&quot;: [&quot;HTTPD&quot;]
  },
  {
    &quot;Name&quot;: &quot;tag:Project&quot;,
    &quot;Values&quot;: [&quot;$env_project&quot;]
  }
]
EOF</command>
      <configuredLocalRules/>
    </hudson.tasks.Shell>
    <hudson.tasks.Shell>
      <command>#!/bin/bash

# Source folder containing the scripts
source_scripts_folder=&quot;${JENKINS_HOME}/workspace/Bash_Functions/&quot;
ls -la &quot;$source_scripts_folder&quot;

# Iterate through the files in the folder and source them
for script_file in &quot;$source_scripts_folder&quot;*.sh; do
    chmod +x &quot;$script_file&quot;
    if [ -f &quot;$script_file&quot; ] &amp;&amp; [ -x &quot;$script_file&quot; ]; then
        echo &quot;sourcing $script_file&quot;
        source &quot;$script_file&quot;
    fi
done

assume_role
# Command to execute swap_stacks
swap_stacks &quot;${staging_tg_name}&quot; \
    &quot;${live_tg_name}&quot; \
    &quot;${WORKSPACE}/staging_httpd_tags_file.json&quot; \
    &quot;${WORKSPACE}/live_httpd_tags_file.json&quot;



</command>
      <configuredLocalRules/>
    </hudson.tasks.Shell>
  </builders>
  <publishers/>
  <buildWrappers>
    <hudson.plugins.ws__cleanup.PreBuildCleanup plugin="ws-cleanup@0.45">
      <deleteDirs>false</deleteDirs>
      <cleanupParameter></cleanupParameter>
      <externalDelete></externalDelete>
      <disableDeferredWipeout>false</disableDeferredWipeout>
    </hudson.plugins.ws__cleanup.PreBuildCleanup>
  </buildWrappers>
</project>