<?xml version='1.1' encoding='UTF-8'?>
<project>
  <actions/>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties/>
  <scm class="hudson.plugins.git.GitSCM" plugin="git@5.2.0">
    <configVersion>2</configVersion>
    <userRemoteConfigs>
      <hudson.plugins.git.UserRemoteConfig>
        <url>${jenkins_git_repo}</url>
      </hudson.plugins.git.UserRemoteConfig>
    </userRemoteConfigs>
    <branches>
      <hudson.plugins.git.BranchSpec>
        <name>${jenkins_git_hash}</name>
      </hudson.plugins.git.BranchSpec>
    </branches>
    <doGenerateSubmoduleConfigurations>false</doGenerateSubmoduleConfigurations>
    <submoduleCfg class="empty-list"/>
    <extensions/>
  </scm>
  <canRoam>true</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers/>
  <concurrentBuild>false</concurrentBuild>
  <builders>
    <hudson.tasks.Shell>
      <command>cd jenkins-terraform
env &gt; env.txt
# backend s3 config will always be encrypted
# need to find a better key location that isn&apos;t tied to the git commit for the job
git_commit_short=`echo ${GIT_COMMIT} |head -c7`

terraform init \
-backend-config=&quot;bucket=${jenkins_tf_state_bucket}&quot; \
-backend-config=&quot;key=jenkins_state/jenkins_${git_commit_short}/terraform.tfstate&quot; \
-backend-config=&quot;region=${jenkins_tf_state_region}&quot;

# could probably just export env vars with TF_ and terraform will use them.
terraform apply -auto-approve \
-var &quot;git_commit=${git_commit_short}&quot; \
-var &quot;stack_s3_bucket=${stack_s3_bucket}&quot; \
-var &quot;stack_id=${stack_id}&quot; \
-var &quot;environment_name=${environment_name}&quot; \
-var &quot;env_is_open_access=${env_is_open_access}&quot; \
-var &quot;jenkins_subnet_id=${jenkins_subnet_id}&quot; \
-var &quot;jenkins_git_repo=${jenkins_git_repo}&quot; \
-var &quot;jenkins_vpc_id=${jenkins_vpc_id}&quot; \
-var &quot;jenkins_instance_profile_name=${jenkins_instance_profile_name}&quot; \
-var &quot;jenkins_sg_ingress_http_cidr_blocks=${jenkins_sg_ingress_http_cidr_blocks}&quot; \
-var &quot;jenkins_sg_ingress_https_cidr_blocks=${jenkins_sg_ingress_https_cidr_blocks}&quot; \
-var &quot;jenkins_sg_egress_allow_all_cidr_blocks=${jenkins_sg_egress_allow_all_cidr_blocks}&quot; \
-var &quot;jenkins_config_s3_location=${jenkins_config_s3_location}&quot; \
-var &quot;jenkins_ec2_instance_type=${jenkins_ec2_instance_type}&quot; \
-var &quot;jenkins_tf_local_var_OS_dist=${jenkins_tf_local_var_OS_dist}&quot; \
-var &quot;jenkins_ec2_ebs_volume_size=${jenkins_ec2_ebs_volume_size}&quot; \
-var &quot;jenkins_docker_maven_distro=${jenkins_docker_maven_distro}&quot; \
-var &quot;jenkins_docker_terraform_distro=${jenkins_docker_terraform_distro}&quot;

# Moving this to Terraform remote state
#aws s3 --sse=AES256 cp terraform.tfstate s3://${stack_s3_bucket}/jenkins_state/jenkins_${GIT_COMMIT}/terraform.tfstate

# Not quite sure why we save the env variables to s3 so leaving it in for now.
aws s3 --sse=AES256 cp env.txt s3://${stack_s3_bucket}/jenkins_state/jenkins_${git_commit_short}/last_env.txt

echo &quot;Waiting for user-script to initialize the environment.&quot;
# This could get moved to a terraform provisioner to wait for the user script to finish.  Essientially would look the same though.  Leaving for now
INSTANCE_ID=`terraform state show aws_instance.jenkins | grep &quot;\&quot;i-[a-f0-9]&quot; | cut -f 2 -d &quot;=&quot; | sed &apos;s/&quot;//g&apos; | xargs`
while [ -z $(aws --region=us-east-1 ec2 describe-tags --filters &quot;Name=resource-id,Values=${INSTANCE_ID}&quot; | grep InitComplete) ];do echo &quot;still initializing&quot;;sleep 10;done
</command>
      <configuredLocalRules/>
    </hudson.tasks.Shell>
  </builders>
  <publishers/>
  <buildWrappers>
    <hudson.plugins.ws__cleanup.PreBuildCleanup plugin="ws-cleanup@0.45">
      <deleteDirs>false</deleteDirs>
      <cleanupParameter></cleanupParameter>
      <externalDelete></externalDelete>
      <disableDeferredWipeout>false</disableDeferredWipeout>
    </hudson.plugins.ws__cleanup.PreBuildCleanup>
  </buildWrappers>
</project>