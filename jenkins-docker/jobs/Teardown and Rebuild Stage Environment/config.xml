<?xml version='1.1' encoding='UTF-8'?>
<project>
  <actions/>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>target_stack</name>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>deployment_git_hash</name>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>ROLE_ARN</name>
          <defaultValue>arn:aws:iam::${app_acct_id}:role/hms-dbmi-cnc-role</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>dataset_s3_object_key</name>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>destigmatized_dataset_s3_object_key</name>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>genomic_dataset_s3_object_key</name>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>infrastructure_git_hash</name>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.BooleanParameterDefinition>
          <name>isDestroyOnly</name>
          <defaultValue>false</defaultValue>
        </hudson.model.BooleanParameterDefinition>
        <hudson.model.BooleanParameterDefinition>
          <name>env_is_open_access</name>
          <defaultValue>true</defaultValue>
        </hudson.model.BooleanParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
  </properties>
  <scm class="hudson.plugins.git.GitSCM" plugin="git@5.2.0">
    <configVersion>2</configVersion>
    <userRemoteConfigs>
      <hudson.plugins.git.UserRemoteConfig>
        <url>${infrastructure_git_repo}</url>
      </hudson.plugins.git.UserRemoteConfig>
    </userRemoteConfigs>
    <branches>
      <hudson.plugins.git.BranchSpec>
        <name>${infrastructure_git_hash}</name>
      </hudson.plugins.git.BranchSpec>
    </branches>
    <doGenerateSubmoduleConfigurations>false</doGenerateSubmoduleConfigurations>
    <submoduleCfg class="empty-list"/>
    <extensions/>
  </scm>
  <canRoam>true</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers/>
  <concurrentBuild>false</concurrentBuild>
  <builders>
    <hudson.tasks.Shell>
      <command>#!/bin/bash
assume_role(){
  local role_arn=${1:-&quot;arn:aws:iam::${app_acct_id}:role/${jenkins_provisioning_assume_role_name}&quot;}
  OUTPUT=$(aws sts assume-role \
  --role-arn $role_arn \
  --role-session-name &quot;teardown-rebuild&quot; \
  --query &quot;Credentials.[AccessKeyId,SecretAccessKey,SessionToken]&quot; \
  --output text)
  
  export AWS_ACCESS_KEY_ID=$(echo $OUTPUT | awk &apos;{print $1}&apos;)
  export AWS_SECRET_ACCESS_KEY=$(echo $OUTPUT | awk &apos;{print $2}&apos;)
  export AWS_SESSION_TOKEN=$(echo $OUTPUT | awk &apos;{print $3}&apos;)
}

reset_role(){
  unset AWS_ACCESS_KEY_ID
  unset AWS_SECRET_ACCESS_KEY
  unset AWS_SESSION_TOKEN
}

export -f assume_role
export -f reset_role

cd app-infrastructure

# Terraform provider can assume role
# Should move this to terraform once we can have multiple providers in provider.tf
# https://registry.terraform.io/providers/hashicorp/aws/latest/docs#assuming-an-iam-role
# Just use an s3 backend in terraform. no reason to store this state via aws cli
aws s3 cp s3://$stack_s3_bucket/deployment_state_metadata/${target_stack}/terraform.tfstate . || echo &quot;bad state or doesnt exist, it will be created&quot;

# NEED TO ADD STACK VARIABLES BACK.  They contain the client secret and introspection token.  Need a better secret store than an s3 bucket
aws s3 cp s3://$stack_s3_bucket/deployment_state_metadata/${target_stack}/stack_variables.tf .
#aws s3 cp s3://$stack_s3_bucket/deployment_state_metadata/${target_stack}/subnet_variables.tf .

#cp stack_variables.tf ../s3-deployment-roles/
#cp subnet_variables.tf ../s3-deployment-roles/

# why are the roles and the rest of everything for the nodes in differenet tf states?
#aws s3 cp s3://$stack_s3_bucket/deployment_state_metadata/${target_stack}/terraform.tfstate_roles ../s3-deployment-roles/terraform.tfstate || echo &quot;role state doesnt exist, it will be created&quot;


assume_role

#  why?
# move the roles in the app-infrastructure and have a flat(ish) model
#cd ../s3-deployment-roles
#terraform init
#terraform destroy -auto-approve -var=&quot;dataset_s3_object_key=${dataset_s3_object_key}&quot; -var=&quot;destigmatized_dataset_s3_object_key=${destigmatized_dataset_s3_object_key}&quot; -var=&quot;genomic_dataset_s3_object_key=${genomic_dataset_s3_object_key}&quot;  -var=&quot;target_stack=${target_stack}&quot; -var=&quot;stack_githash=`echo ${deployment_git_hash} |cut -c1-7`&quot; -var=&quot;stack_githash_long=${deployment_git_hash}&quot; || true
#terraform apply -auto-approve -var=&quot;dataset_s3_object_key=${dataset_s3_object_key}&quot;  -var=&quot;destigmatized_dataset_s3_object_key=${destigmatized_dataset_s3_object_key}&quot; -var=&quot;genomic_dataset_s3_object_key=${genomic_dataset_s3_object_key}&quot; -var=&quot;target_stack=${target_stack}&quot; -var=&quot;stack_githash=`echo ${deployment_git_hash} |cut -c1-7`&quot; -var=&quot;stack_githash_long=${deployment_git_hash}&quot; || true

terraform init
if $isDestroyOnly; then

  terraform destroy -auto-approve \
     -var=&quot;dataset_s3_object_key=${dataset_s3_object_key}&quot;  \
     -var=&quot;destigmatized_dataset_s3_object_key=${destigmatized_dataset_s3_object_key}&quot;  \
     -var=&quot;genomic_dataset_s3_object_key=${genomic_dataset_s3_object_key}&quot; \
     -var=&quot;target_stack=${target_stack}&quot; \
     -var=&quot;stack_githash=`echo ${deployment_git_hash} |cut -c1-7`&quot; \
     -var=&quot;stack_githash_long=${deployment_git_hash}&quot; \
     -var=&quot;env_public_dns_name=${env_public_dns_name}&quot; \
     -var=&quot;env_private_dns_name=${env_private_dns_name}&quot; \
     -var=&quot;env_hosted_zone_id=${env_hosted_zone_id}&quot; \
     -var=&quot;env_is_open_access=${env_is_open_access}&quot; \
     -var=&quot;environment_name=${environment_name}&quot; \
     -var=&quot;stack_s3_bucket=${stack_s3_bucket}&quot; \
     -var=&quot;env_staging_subdomain=${env_staging_subdomain}&quot; \
     -var=&quot;application_id_for_base_query=${application_id_for_base_query}&quot;

  reset_role

  # Move to terraform backend
  aws s3 cp terraform.tfstate s3://$stack_s3_bucket/deployment_state_metadata/${target_stack}/terraform.tfstate

else
  terraform destroy -auto-approve \
     -var=&quot;dataset_s3_object_key=${dataset_s3_object_key}&quot;  \
     -var=&quot;destigmatized_dataset_s3_object_key=${destigmatized_dataset_s3_object_key}&quot;  \
     -var=&quot;genomic_dataset_s3_object_key=${genomic_dataset_s3_object_key}&quot; \
     -var=&quot;target_stack=${target_stack}&quot; \
     -var=&quot;stack_githash=`echo ${deployment_git_hash} |cut -c1-7`&quot; \
     -var=&quot;stack_githash_long=${deployment_git_hash}&quot; \
     -var=&quot;env_public_dns_name=${env_public_dns_name}&quot; \
     -var=&quot;env_private_dns_name=${env_private_dns_name}&quot; \
     -var=&quot;env_hosted_zone_id=${env_hosted_zone_id}&quot; \
     -var=&quot;env_is_open_access=${env_is_open_access}&quot; \
     -var=&quot;environment_name=${environment_name}&quot; \
     -var=&quot;env_staging_subdomain=${env_staging_subdomain}&quot; \
     -var=&quot;application_id_for_base_query=${application_id_for_base_query}&quot; \
     -var=&quot;stack_s3_bucket=${stack_s3_bucket}&quot; || true

  terraform apply -auto-approve \
     -var=&quot;dataset_s3_object_key=${dataset_s3_object_key}&quot;  \
     -var=&quot;destigmatized_dataset_s3_object_key=${destigmatized_dataset_s3_object_key}&quot;  \
     -var=&quot;genomic_dataset_s3_object_key=${genomic_dataset_s3_object_key}&quot; \
     -var=&quot;target_stack=${target_stack}&quot; \
     -var=&quot;stack_githash=`echo ${deployment_git_hash} |cut -c1-7`&quot; \
     -var=&quot;stack_githash_long=${deployment_git_hash}&quot; \
     -var=&quot;env_public_dns_name=${env_public_dns_name}&quot; \
     -var=&quot;env_private_dns_name=${env_private_dns_name}&quot; \
     -var=&quot;env_hosted_zone_id=${env_hosted_zone_id}&quot; \
     -var=&quot;env_is_open_access=${env_is_open_access}&quot; \
     -var=&quot;environment_name=${environment_name}&quot; \
     -var=&quot;env_staging_subdomain=${env_staging_subdomain}&quot; \
     -var=&quot;application_id_for_base_query=${application_id_for_base_query}&quot; \
     -var=&quot;stack_s3_bucket=${stack_s3_bucket}&quot; || true

  reset_role

  # Move to terraform backend
  # If script fails before state file is uploaded to s3 state will be lost for created objects \
  # terraform destroy will not destroy anything as it points to old state and apply will fail as objects may already exist
  # Will have to manually destroy and delete roles, ec2s, etc. in that scenario
  aws s3 cp terraform.tfstate s3://$stack_s3_bucket/deployment_state_metadata/${target_stack}/terraform.tfstate
  # roles are now in the same state as their related resources..
  #aws s3 cp ../s3-deployment-roles/terraform.tfstate s3://$stack_s3_bucket/deployment_state_metadata/${target_stack}/terraform.tfstate_roles

  # These files are uploaded to s3 because user-scripts download them.  The user scripts are already running
  # so this is a race condition at this point as terraform has been applied
  #  have terraform provision these to the ec2 and remove the aws cli stuff from the user-scripts and here
  aws s3 --sse=AES256 cp picsureui-settings.json s3://$stack_s3_bucket/configs/jenkins_pipeline_build_${deployment_git_hash}/picsureui_settings.json
  aws s3 --sse=AES256 cp standalone.xml s3://$stack_s3_bucket/configs/jenkins_pipeline_build_${deployment_git_hash}/standalone.xml
  aws s3 --sse=AES256 cp pic-sure-schema.sql s3://$stack_s3_bucket/configs/jenkins_pipeline_build_${deployment_git_hash}/pic-sure-schema.sql
  aws s3 --sse=AES256 cp httpd-vhosts.conf s3://$stack_s3_bucket/configs/jenkins_pipeline_build_${deployment_git_hash}/httpd-vhosts.conf
  aws s3 --sse=AES256 cp aggregate-resource.properties s3://$stack_s3_bucket/configs/jenkins_pipeline_build_${deployment_git_hash}/aggregate-resource.properties
  aws s3 --sse=AES256 cp visualization-resource.properties s3://$stack_s3_bucket/configs/jenkins_pipeline_build_${deployment_git_hash}/visualization-resource.properties

fi</command>
      <configuredLocalRules/>
    </hudson.tasks.Shell>
  </builders>
  <publishers/>
  <buildWrappers>
    <hudson.plugins.ws__cleanup.PreBuildCleanup plugin="ws-cleanup@0.45">
      <deleteDirs>false</deleteDirs>
      <cleanupParameter></cleanupParameter>
      <externalDelete></externalDelete>
      <disableDeferredWipeout>false</disableDeferredWipeout>
    </hudson.plugins.ws__cleanup.PreBuildCleanup>
  </buildWrappers>
</project>