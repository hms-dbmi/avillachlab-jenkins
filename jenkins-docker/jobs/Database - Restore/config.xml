<?xml version='1.1' encoding='UTF-8'?>
<project>
  <actions/>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>TARGET_DATABASE</name>
          <defaultValue>auth</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <org.biouno.unochoice.ChoiceParameter plugin="uno-choice@2.8.3">
          <name>BACKUP_FILENAME</name>
          <randomName>choice-parameter-361833882686831</randomName>
          <visibleItemCount>1</visibleItemCount>
          <script class="org.biouno.unochoice.model.GroovyScript">
            <secureScript plugin="script-security@1358.vb_26663c13537">
              <script>import groovy.json.JsonSlurper

// Access the S3 bucket from environment variables (Groovy syntax)
def s3Bucket = binding.variables.get(&quot;stack_s3_bucket&quot;)

// Check if the bucket is retrieved correctly
if (s3Bucket == null || s3Bucket.isEmpty()) {
    println &quot;Error: &apos;stack_s3_bucket&apos; environment variable is not set or empty.&quot;
    return [&quot;No files found&quot;]
} else {
    println &quot;S3 Bucket from Environment: ${s3Bucket}&quot;
}

def s3Path = &apos;database_backups/&apos;
def awsCommand = &quot;aws s3 ls s3://${s3Bucket}/${s3Path} --recursive | awk &apos;{print \$4}&apos;&quot;

// Print the AWS command to verify it&apos;s correct
println &quot;Running AWS command: ${awsCommand}&quot;

// Run the AWS CLI command to list the files
def proc = [&quot;bash&quot;, &quot;-c&quot;, awsCommand].execute()
proc.waitFor()

// Capture the output
def output = proc.text.trim()

// Print the raw output for debugging
println &quot;AWS CLI Raw Output: ${output}&quot;

// Check if output is empty
if (output.isEmpty()) {
    println &quot;No files were returned by the AWS CLI command.&quot;
    return [&quot;No files found&quot;]
}

// Split the output into an array of file names
def files = output.split(&quot;\n&quot;)

// Remove the path prefix if needed (optional)
files = files.collect { it.replace(&quot;database_backups/&quot;, &quot;&quot;) }

// Print the list of file names for debugging
println &quot;Files Found: ${files}&quot;

// Return the list of file names for the dropdown
return files</script>
              <sandbox>false</sandbox>
            </secureScript>
            <secureFallbackScript plugin="script-security@1358.vb_26663c13537">
              <script></script>
              <sandbox>false</sandbox>
            </secureFallbackScript>
          </script>
          <projectName>Database - Restore</projectName>
          <projectFullName>Database - Restore</projectFullName>
          <choiceType>PT_SINGLE_SELECT</choiceType>
          <filterable>false</filterable>
          <filterLength>1</filterLength>
        </org.biouno.unochoice.ChoiceParameter>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
  </properties>
  <scm class="hudson.scm.NullSCM"/>
  <canRoam>true</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <jdk>(System)</jdk>
  <triggers/>
  <concurrentBuild>false</concurrentBuild>
  <builders>
    <hudson.tasks.Shell>
      <command>#!/bin/bash

# Check if the database root user has been set
if [ -z &quot;$database_root_user_secret_name&quot; ]; then
    echo &quot;The &apos;$database_root_user_secret_name&apos; must be set in the global configuration&quot;
    exit 1
fi

# Source folder containing the scripts
source_scripts_folder=&quot;${JENKINS_HOME}/workspace/Bash_Functions/&quot;
ls -la &quot;$source_scripts_folder&quot;

# Iterate through the files in the folder and source them
for script_file in &quot;$source_scripts_folder&quot;*.sh; do
chmod +x &quot;$script_file&quot;
if [ -f &quot;$script_file&quot; ] &amp;&amp; [ -x &quot;$script_file&quot; ]; then
    echo &quot;sourcing $script_file&quot;
    source &quot;$script_file&quot;
fi
done

assume_role

# Getting db admin user secret value by secret name
db_admin_user_json=$(fetch_secret &quot;$database_root_user_secret_name&quot;)

# DB admin user information
db_admin_user_username=$(extract_field &quot;$db_admin_user_json&quot; &quot;username&quot;)
db_admin_user_password=$(extract_field &quot;$db_admin_user_json&quot; &quot;password&quot;)
db_admin_user_host=$database_host_address

# Check if any of the variables are empty
if [ -z &quot;$db_admin_user_username&quot; ] || [ -z &quot;$db_admin_user_password&quot; ] || [ -z &quot;$db_admin_user_host&quot; ]; then
    echo &quot;Error: One or more required database variables are empty.&quot; &gt;&amp;2
    exit 1
fi

initialize_shared_db_config &quot;${db_admin_user_host%:3306}&quot; &quot;$db_admin_user_username&quot; &quot;$db_admin_user_password&quot;

reset_role

restore_schema &quot;$TARGET_DATABASE&quot; &quot;$BACKUP_FILENAME&quot;

echo &quot;Created $backup_filename&quot;

unset_shared_db_config

</command>
      <configuredLocalRules/>
    </hudson.tasks.Shell>
  </builders>
  <publishers/>
  <buildWrappers/>
</project>