<?xml version='1.1' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@1426.v2ecb_a_a_42fd46">
  <actions>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@2.2198.v41dd8ef6dd56"/>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@2.2198.v41dd8ef6dd56">
      <jobProperties/>
      <triggers/>
      <parameters>
        <string>RUN_DATABASE_MIGRATIONS</string>
        <string>DROP_TABLES</string>
      </parameters>
      <options/>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
  </actions>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.plugins.copyartifact.CopyArtifactPermissionProperty plugin="copyartifact@722.v0662a_9b_e22a_c">
      <projectNameList>
        <string>*</string>
      </projectNameList>
    </hudson.plugins.copyartifact.CopyArtifactPermissionProperty>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.BooleanParameterDefinition>
          <name>RUN_DATABASE_MIGRATIONS</name>
          <description>Run database migrations</description>
          <defaultValue>true</defaultValue>
        </hudson.model.BooleanParameterDefinition>
        <hudson.model.BooleanParameterDefinition>
          <name>DROP_TABLES</name>
          <description>Drop tables during migration</description>
          <defaultValue>false</defaultValue>
        </hudson.model.BooleanParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@3894.3896.vca_2c931e7935">
    <script>import groovy.json.JsonSlurper;
def bdc_ui_docker_tag;

def retrieveBuildSpecId;
def bdcUIBuildSpecId;
def overrideUiBuildSpec;
def pipelineBuildId;
def build_hashes = {};
def hasOverrideUI;
def infrastructure_git_hash

pipeline {
    agent any
    parameters {
        booleanParam(name: &apos;RUN_DATABASE_MIGRATIONS&apos;, defaultValue: true, description: &apos;Run database migrations&apos;)
        booleanParam(name: &apos;DROP_TABLES&apos;, defaultValue: false, description: &apos;Drop tables during migration&apos;)
    }
    stages {
        stage(&apos;Retrieve Build Spec&apos;) {
            steps {
                script {
                    def result = build job: &apos;Retrieve Build Spec&apos;
                    retrieveBuildSpecId = result.number
                }
                script {
                    copyArtifacts filter: &apos;*&apos;, projectName: &apos;Retrieve Build Spec&apos;, selector: specific(&quot;&quot;+retrieveBuildSpecId)
                    sh &apos;cat build-spec.json&apos;
                    sh &apos;cat pipeline_git_commit.txt&apos;
                    sh &apos;pwd&apos;
                    def buildSpec = new JsonSlurper().parse(new File(&apos;/var/jenkins_home/workspace/Deploy PSAMA in place/build-spec.json&apos;))
                    pipelineBuildId = new File(&apos;/var/jenkins_home/workspace/Deploy PSAMA in place/pipeline_git_commit.txt&apos;).text.trim()
                    for(def build : buildSpec.application){
                        build_hashes[build.project_job_git_key] = build.git_hash
                    }
                    infrastructure_git_hash = buildSpec.infrastructure_git_hash
                }
            }
        }
        stage(&apos;PSAMA&apos;) {
            steps {
                script{
                    def result = build job: &apos;PIC-SURE Auth Micro-App Build - Jenkinsfile&apos;, parameters: [[$class: &apos;StringParameterValue&apos;, name: &apos;pipeline_build_id&apos;, value: pipelineBuildId],[$class: &apos;StringParameterValue&apos;, name: &apos;git_hash&apos;, value: build_hashes[&apos;PSAMA&apos;]]]
                }
            }
        }
        stage(&apos;Update PSAMA on WildFly&apos;) {
            steps {
                script {
                    def result = build job: &apos;Deploy PSAMA to Existing WildFly EC2 - Standalone Tomcat Container&apos;, parameters: [[$class: &apos;StringParameterValue&apos;, name: &apos;pipeline_build_id&apos;, value: pipelineBuildId]]
                }
            }
        }
        stage(&apos;Database Migrations&apos;) {
            when {
                expression { return params.RUN_DATABASE_MIGRATIONS }
            }
            steps {
                script {
                    def result = build job: &apos;Database Migrations&apos;, parameters: [[$class: &apos;StringParameterValue&apos;, name: &apos;infrastructure_git_hash&apos;, value: infrastructure_git_hash],
                    [$class: &apos;BooleanParameterValue&apos;, name: &apos;DROP_TABLES&apos;, value: params.DROP_TABLES]]
                }
            }
        }
    }
}</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>