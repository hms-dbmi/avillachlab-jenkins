<?xml version='1.1' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@1316.vd2290d3341a_f">
  <actions>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@2.2144.v077a_d1928a_40"/>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@2.2144.v077a_d1928a_40">
      <jobProperties/>
      <triggers/>
      <parameters/>
      <options/>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
  </actions>
  <description>This job  needs to be removed.&#xd;
&#xd;
User-scripts have already started by this point... Need to at least execute this before terraform builds the nodes.  Really Terraform should be handling the state of this bucket not jenkins aws-cli calls</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>target_stack</name>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>stack_githash</name>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@3740.v6d35b_4ed5f9f">
    <script>import groovy.json.JsonSlurper;
import groovy.json.JsonOutput;

def new_policy
pipeline {
    agent any
    stages {
        stage(&apos;Retrieve Build Spec&apos;) {
            steps {
                script {
                    sh &apos;aws s3api get-bucket-policy --bucket ${stack_s3_bucket} --query Policy --output text &gt; /tmp/policy.json&apos;
                    def bucket_policy = new JsonSlurper().parse(new File(&apos;/tmp/policy.json&apos;))
                    def statements_to_remove = [];
                    def target_stack = &quot;$target_stack&quot;
                    def stack_githash = &quot;$stack_githash&quot;
                    def short_githash = stack_githash.substring(0,7)
                    for(def statement : bucket_policy.Statement){
                        if(statement.Sid!=null &amp;&amp; statement.Sid.startsWith(&quot;stack-&quot;+target_stack+&quot;-statement&quot;)
                        ||statement.Principal.AWS.size()&lt;22){
                            // This is an identifier that AWS uses for deleted stuff... not really sure past that
                            statements_to_remove.push(statement)
                        }
                    }
                    bucket_policy.Statement.removeAll(statements_to_remove)
                    bucket_policy.Statement.push(new JsonSlurper().parseText(&quot;{\&quot;Sid\&quot;: \&quot;stack-&quot;+target_stack+&quot;-statement-&quot;+short_githash+&quot;\&quot;, \&quot;Effect\&quot;: \&quot;Allow\&quot;,\&quot;Principal\&quot;: {\&quot;AWS\&quot;: [ \&quot;arn:aws:iam::${app_acct_id}:role/httpd-deployment-s3-role-&quot; + target_stack + &quot;-&quot; + short_githash + &quot;\&quot;, \&quot;arn:aws:iam::${app_acct_id}:role/open-hpds-deployment-s3-role-&quot; + target_stack + &quot;-&quot; + short_githash + &quot;\&quot;, \&quot;arn:aws:iam::${app_acct_id}:role/auth-hpds-deployment-s3-role-&quot; + target_stack + &quot;-&quot; + short_githash + &quot;\&quot;, \&quot;arn:aws:iam::${app_acct_id}:role/wildfly-deployment-s3-role-&quot; + target_stack + &quot;-&quot; + short_githash + &quot;\&quot;, \&quot;arn:aws:iam::${app_acct_id}:role/dictionary-deployment-s3-role-&quot; + target_stack + &quot;-&quot; + short_githash + &quot;\&quot;] }, \&quot;Action\&quot;: [\&quot;s3:GetObject\&quot;, \&quot;s3:ListBucket\&quot; ], \&quot;Resource\&quot;: [\&quot;arn:aws:s3:::${stack_s3_bucket}/*\&quot;, \&quot;arn:aws:s3:::${stack_s3_bucket}\&quot;] }&quot;));
                    new_policy = new JsonOutput().toJson(bucket_policy)

                }
                script{
                    println(new_policy)
                    println(&apos;writing file&apos;)
                    writeFile file: &apos;new_policy.json&apos;, text: new_policy
                    println(&apos;forming command&apos;)
                    def command = &quot;aws s3api put-bucket-policy --bucket ${stack_s3_bucket} --policy file://new_policy.json&quot;
                    println(&apos;pushing file&apos;)
                    println command
                    sh command
                    println(&apos;pushed file&apos;)
                }
            }
        }
    }
}</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>