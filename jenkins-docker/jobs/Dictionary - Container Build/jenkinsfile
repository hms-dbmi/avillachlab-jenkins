pipeline {
    agent any

    parameters {
        string(name: 'GIT_REPO_URL', defaultValue: 'https://github.com/hms-dbmi/picsure-dictionary.git', description: 'The GitHub repository URL')
        string(name: 'GIT_BRANCH', defaultValue: 'main', description: 'The Git branch to checkout')
        string(name: 'DOCKER_REPO', defaultValue: 'avillach', description: 'The Docker repository name')
        string(name: 'API_IMAGE_NAME', defaultValue: 'dictionary-api', description: 'The Docker image name for the Dictionary API')
        string(name: 'DOCKER_IMAGE_VERSION', defaultValue: 'latest', description: 'The Docker image version/tag')
        string(name: 'SPRING_PROFILE', defaultValue: 'bdc', description: 'The Spring profile')
        string(name: 'DATASOURCE_URL', description: 'Datasource URL', defaultValue: '${database_psql_host_address}')
        string(name: 'DATASOURCE_USERNAME', description: 'Datasource username', defaultValue: '${database_psql_app_user_secret_name}')
    }

    stages {
        stage('Clone Repository') {
            steps {
                script {
                    def ref = "${params.GIT_BRANCH}"
                    checkout([$class: 'GitSCM',
                        branches: [[name: ref]],
                        userRemoteConfigs: [[url: "${params.GIT_REPO_URL}"]]
                    ])
                }
            }
        }

        stage('Build Dictionary Docker Image') {
            steps {
                dir('.') {
                    script {
                        def buildArgs = " --build-arg DATASOURCE_URL=${env.DATASOURCE_URL} " +
                                        " --build-arg DATASOURCE_USERNAME=${env.DATASOURCE_USERNAME} " +
                                        " --build-arg SPRING_PROFILE=${params.SPRING_PROFILE}"

                        sh "docker build --no-cache ${buildArgs} -t '${params.DOCKER_REPO}/${params.API_IMAGE_NAME}:${params.DOCKER_IMAGE_VERSION}' ."
                    }
                }
            }
        }

        stage('Save Docker Images as TAR') {
            steps {
                script {
                    sh "docker save -o dictionary-api.tar.gz ${params.DOCKER_REPO}/${params.API_IMAGE_NAME}:${params.DOCKER_IMAGE_VERSION}"
                }
            }
        }

        stage('Upload TAR Files to S3') {
            steps {
                script {
                    sh "aws s3 cp dictionary-api.tar.gz s3://${stack_s3_bucket}/containers/application/dictionary-api.tar.gz"
                }
            }
        }
    }
}
