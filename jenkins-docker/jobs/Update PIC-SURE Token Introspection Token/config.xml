<?xml version='1.1' encoding='UTF-8'?>
<project>
  <actions/>
  <description>This job will output a valid long-term jwt token.</description>
  <keepDependencies>false</keepDependencies>
  <properties/>
  <scm class="hudson.scm.NullSCM"/>
  <canRoam>true</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers/>
  <concurrentBuild>false</concurrentBuild>
  <builders>
    <hudson.tasks.Shell>
      <command>#!/bin/bash
set -e
# Source folder containing the scripts
source_scripts_folder=&quot;${JENKINS_HOME}/workspace/Bash_Functions/&quot;
ls -la &quot;$source_scripts_folder&quot;

# Iterate through the files in the folder and source them
for script_file in &quot;$source_scripts_folder&quot;*.sh; do
    chmod +x &quot;$script_file&quot;
    if [ -f &quot;$script_file&quot; ] &amp;&amp; [ -x &quot;$script_file&quot; ]; then
        echo &quot;sourcing $script_file&quot;
        source &quot;$script_file&quot;
    fi
done

assume_role

# Getting db admin user secret value by secret name
db_admin_user_json=$(fetch_secret &quot;$database_admin_user_secret_name&quot;)

# DB admin user information
db_admin_user_username=$(extract_field &quot;$db_admin_user_json&quot; &quot;username&quot;)
db_admin_user_password=$(extract_field &quot;$db_admin_user_json&quot; &quot;password&quot;)
db_admin_user_host=$(extract_field &quot;$db_admin_user_json&quot; &quot;host&quot;)

# Initialize database connection information
initialize_shared_db_config &quot;${db_admin_user_host%:3306}&quot; &quot;$db_admin_user_username&quot; &quot;$db_admin_user_password&quot;

introspection_token=$(get_token_by_uuid &quot;$application_id_for_base_query&quot;)
if [ -z &quot;$introspection_token&quot; ]; then
	echo &quot;No token currently exists. There may be an issue with the Auth database.&quot;
    exit 0;
fi

# Pretty print the token&apos;s expiration date
expiry_date=$(get_jwt_expiration_date &quot;$introspection_token&quot;)
echo &quot;Token&apos;s expiration date: $expiry_date&quot;

# Check if the token is expiring soon
if is_expiring_soon &quot;$expiry_date&quot;; then
    echo &quot;Token is expiring within the next 30 days. Generating a new token...&quot;
    # Generate a new token - create_jwt_token outputs token to variable CREATE_JWT_TOKEN_OUTPUT
    create_jwt_token &quot;$picsure_client_secret&quot; &quot;$pic_sure_introspection_token_repo&quot; &quot;PSAMA_APPLICATION|$application_id_for_base_query&quot; &quot;${duration_int:-365}&quot; &quot;${duration_unit:-day}&quot;
    
    if [ -n &quot;$CREATE_JWT_TOKEN_OUTPUT&quot; ]; then
        echo &quot;New JWT generated successfully.&quot;
        echo &quot;Update the picsure_token_introspection_token configuration with the following:&quot;
        echo &quot;$CREATE_JWT_TOKEN_OUTPUT&quot;
        
        # Update the db application with the new token
        update_token_by_uuid &quot;$application_id_for_base_query&quot; &quot;$CREATE_JWT_TOKEN_OUTPUT&quot;
    else
        echo &quot;Token was not generated successfully. Check that the provided configurations are valid.&quot;
        exit 1
    fi
else
    echo &quot;Token&apos;s valid duration is sufficient. No need for a new token.&quot;
fi

unset_shared_db_config
reset_role</command>
      <configuredLocalRules/>
    </hudson.tasks.Shell>
  </builders>
  <publishers/>
  <buildWrappers>
    <hudson.plugins.ws__cleanup.PreBuildCleanup plugin="ws-cleanup@0.45">
      <deleteDirs>false</deleteDirs>
      <cleanupParameter></cleanupParameter>
      <externalDelete></externalDelete>
      <disableDeferredWipeout>false</disableDeferredWipeout>
    </hudson.plugins.ws__cleanup.PreBuildCleanup>
  </buildWrappers>
</project>